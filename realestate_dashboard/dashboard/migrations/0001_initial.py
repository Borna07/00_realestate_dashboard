# Generated by Django 4.2.7 on 2023-11-01 09:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="City",
            fields=[
                ("city_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                (
                    "size",
                    models.FloatField(
                        help_text="Size of the city in square kilometers."
                    ),
                ),
                ("web_link_sale", models.URLField(blank=True, null=True)),
                ("web_link_rent", models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="SaleDataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_clean_entries", models.PositiveIntegerField()),
                ("total_raw", models.PositiveIntegerField()),
                ("calendar_week", models.PositiveIntegerField()),
                ("calendar_month", models.PositiveIntegerField()),
                ("calendar_year", models.PositiveIntegerField()),
                ("average_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "average_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("average_size", models.FloatField()),
                ("average_year_of_construction", models.PositiveIntegerField()),
                ("median_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "median_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("median_size", models.FloatField()),
                ("median_year_of_construction", models.PositiveIntegerField()),
                ("std_dev_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "std_dev_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("std_dev_size", models.FloatField()),
                ("mode_year_of_construction", models.PositiveIntegerField()),
                ("highest_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("highest_price_link", models.URLField(blank=True, null=True)),
                (
                    "highest_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("highest_price_per_sqm_link", models.URLField(blank=True, null=True)),
                ("lowest_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("lowest_price_link", models.URLField(blank=True, null=True)),
                (
                    "lowest_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("lowest_price_per_sqm_link", models.URLField(blank=True, null=True)),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dashboard.city"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SaleDataEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("county", models.CharField(max_length=255)),
                ("city_or_municipality", models.CharField(max_length=255)),
                ("settlement", models.CharField(blank=True, max_length=255, null=True)),
                ("number_of_rooms", models.PositiveIntegerField()),
                ("number_of_apartment_floors", models.PositiveIntegerField()),
                ("apartment_type", models.CharField(max_length=255)),
                ("custom_object_code", models.CharField(max_length=255)),
                ("year_of_construction", models.PositiveIntegerField()),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("link", models.URLField()),
                ("date", models.DateField()),
                ("residential_area_sqm", models.FloatField()),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "phone_or_mobile",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("price_per_sqm", models.DecimalField(decimal_places=2, max_digits=10)),
                ("days_online", models.PositiveIntegerField()),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sale_data_entries",
                        to="dashboard.saledataset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RentDataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_clean_entries", models.PositiveIntegerField()),
                ("total_raw", models.PositiveIntegerField()),
                ("calendar_week", models.PositiveIntegerField()),
                ("calendar_month", models.PositiveIntegerField()),
                ("calendar_year", models.PositiveIntegerField()),
                ("average_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "average_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("average_size", models.FloatField()),
                ("average_year_of_construction", models.PositiveIntegerField()),
                ("median_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "median_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("median_size", models.FloatField()),
                ("median_year_of_construction", models.PositiveIntegerField()),
                ("std_dev_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "std_dev_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("std_dev_size", models.FloatField()),
                ("mode_year_of_construction", models.PositiveIntegerField()),
                ("highest_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("highest_price_link", models.URLField(blank=True, null=True)),
                (
                    "highest_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("highest_price_per_sqm_link", models.URLField(blank=True, null=True)),
                ("lowest_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("lowest_price_link", models.URLField(blank=True, null=True)),
                (
                    "lowest_price_per_sqm",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("lowest_price_per_sqm_link", models.URLField(blank=True, null=True)),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dashboard.city"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RentDataEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("county", models.CharField(max_length=255)),
                ("city_or_municipality", models.CharField(max_length=255)),
                ("settlement", models.CharField(blank=True, max_length=255, null=True)),
                ("number_of_rooms", models.PositiveIntegerField()),
                ("number_of_apartment_floors", models.PositiveIntegerField()),
                ("apartment_type", models.CharField(max_length=255)),
                ("custom_object_code", models.CharField(max_length=255)),
                ("year_of_construction", models.PositiveIntegerField()),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("link", models.URLField()),
                ("date", models.DateField()),
                ("residential_area_sqm", models.FloatField()),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "phone_or_mobile",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("price_per_sqm", models.DecimalField(decimal_places=2, max_digits=10)),
                ("days_online", models.PositiveIntegerField()),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rent_data_entries",
                        to="dashboard.rentdataset",
                    ),
                ),
            ],
        ),
    ]
